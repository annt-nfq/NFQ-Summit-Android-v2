# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
require 'octokit'

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Run snapshot tests"
  lane :snapshotTest do
    begin
      gradle(task: "app:verifyPaparazziDebug")
    rescue => exception
      UI.important("Snapshot tests failed. Running error handling script...")

      # Ensure the script is executable
      sh("chmod +x #{Dir.pwd}/process_failed_snapshot_tests.sh")

      # Run the script with necessary environment variables and capture output
      result = `GITHUB_TOKEN='#{ENV['GITHUB_TOKEN']}' \
         GITHUB_REPOSITORY='#{ENV['GITHUB_REPOSITORY']}' \
         PULL_REQUEST_BRANCH='#{ENV['PULL_REQUEST_BRANCH']}' \
         GITHUB_REF='#{ENV['GITHUB_REF']}' \
         #{Dir.pwd}/process_failed_snapshot_tests.sh`

      # Check if the script executed successfully
      unless $?.success?
        UI.error("Failed to process screenshots: #{result}")
        raise "Screenshot processing failed"
      end

      # Parse the output to get PR number and comment
      pr_number_match = result.match(/PULL_REQUEST_NUMBER=(\d+)/)
      pr_comment_match = result.match(/PULL_REQUEST_COMMENT=(.+)/m)

      if pr_number_match && pr_comment_match
        pr_number = pr_number_match[1]
        pr_comment = pr_comment_match[1]

        # Create a comment on the PR using Octokit
        create_pr_comment(pr_number, pr_comment)
      else
        UI.error("Failed to parse script output: #{result}")
      end

      # Re-raise the exception to ensure the lane is marked as failed
      raise exception
    end
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    release = firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        firebase_cli_token: ENV["FIREBASE_TOKEN"],
        groups: "nfq-internal",
        android_artifact_type: "APK",
        debug: "true"
    )
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end

  def create_pr_comment(pr_number, comment)
    client = Octokit::Client.new(access_token: ENV['GITHUB_TOKEN'])
    repo = ENV['GITHUB_REPOSITORY']
    client.add_comment(repo, pr_number, comment)
  rescue => e
    UI.error("Failed to create PR comment: #{e.message}")
  end
end
